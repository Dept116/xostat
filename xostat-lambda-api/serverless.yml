org: xostat
app: xostat-lambda-api
service: xostat-lambda-api

provider:
  name: aws
  region: us-east-2
  stage: ${opt:stage, 'dev'}
  vpc:
    securityGroupIds:
      - ${ssm:/vpc/lambdaToRDS}
    subnetIds:
      - ${ssm:/vpc/us-east-2b}
      - ${ssm:/vpc/us-east-2c}
  environment:
    DB_HOST: ${self:custom.${self:provider.stage}.DB_HOST}
    DB_PORT: ${self:custom.${self:provider.stage}.DB_PORT}
    DB_NAME: ${self:custom.${self:provider.stage}.DB_NAME}
    DB_USER: ${self:custom.${self:provider.stage}.DB_USER}
    DB_PASSWORD: ${self:custom.${self:provider.stage}.DB_PASSWORD}
package:
  exclude:
    - ./**/target/**
    - ./devops/**
    - ./rust/**
    - ./**/*.md
    - ./**/*.txt
plugins:
  - serverless-offline
  - serverless-python-requirements
custom:
  serverless-offline:
    host: localhost
    port: 3000
  prod:
    DB_HOST: ${ssm:/rds/prod/host}
    DB_PORT: ${ssm:/rds/prod/port}
    DB_NAME: ${ssm:/rds/prod/dbname}
    DB_USER: ${ssm:/rds/prod/username}
    DB_PASSWORD: ${ssm:/rds/prod/password}
  dev:
    DB_HOST: localhost
    DB_PORT: 5432
    DB_NAME: xodat
    DB_USER: dev
    DB_PASSWORD: devpass1
functions:
  uploadMatch:
    handler: python/controllers/upload.upload_matches
    runtime: python3.8
    description: upload a list of matches to xodat
    memorySize: 2048
    timeout: 30
    events:
      - http:
          path: /upload
          method: post
          cors: false
          request:
            schemas:
              application/json:
                schema: ${file(schema/uploadSchema.json)}
                name: UploadModel
                description: "Validation for uploading match"
    layers:
      - arn:aws:lambda:us-east-2:189829313893:layer:sqlalchemy-layer:6
  getUploadRecords:
    handler: python/controllers/player.get_upload_records
    runtime: python3.8
    timeout: 30
    events:
      - http:
          path: /player/{id}
          method: get
          cors: true
    layers:
      - arn:aws:lambda:us-east-2:189829313893:layer:sqlalchemy-layer:6
  updateResourcePrices:
    handler: updateResourcePrices
    vpc:
      securityGroupIds:
        - ${ssm:/vpc/lambdaToRDS}
        - ${ssm:/vpc/lambdaToHttps}
      subnetIds:
        - ${ssm:/vpc/us-east-2b}
        - ${ssm:/vpc/us-east-2c}
    timeout: 30
    runtime: provided
    package:
      artifact: ./rust/updateResourcePrices/target/lambda/update-resource-prices/bootstrap.zip
    events:
      - schedule:
          rate: cron(0 3 * * ? *)
